USE ELIXIR;
  
  ALTER TABLE EMPLOYE
  ADD CONSTRAINT CK_EMPLOYE_SALAIRE_POSITIF CHECK (SALAIRE >= 0),
  ADD CONSTRAINT CK_EMPLOYE_POSTE_NONVIDE CHECK (LENGTH(TRIM(POSTE)) > 0);
  
  ALTER TABLE PARFUM
  ADD CONSTRAINT CK_PARFUM_NOM_NONVIDE CHECK (LENGTH(TRIM(NOM_PARFUM)) > 0),
  ADD CONSTRAINT CK_PARFUM_CATEGORIE_NONVIDE CHECK (LENGTH(TRIM(CATEGORIE)) > 0),
  ADD CONSTRAINT CK_PARFUM_GENRE_NONVIDE CHECK (LENGTH(TRIM(GENRE)) > 0);
  
  ALTER TABLE FOURNISSEUR
  ADD CONSTRAINT CK_FOURNISSEUR_TELEPHONE_FORMAT CHECK (TELEPHONE_FOURNISSEUR REGEXP '^[0-9 +()\\-]{6,20}$'),
  ADD CONSTRAINT CK_FOURNISSEUR_EMAIL_FORMAT CHECK (EMAIL_FOURNISSEUR REGEXP '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
  ADD CONSTRAINT CK_FOURNISSEUR_NOM_NONVIDE CHECK (LENGTH(TRIM(NOM_FOURNISSEUR)) > 0),
  ADD CONSTRAINT CK_FOURNISSEUR_ADRESSE_NONVIDE CHECK (LENGTH(TRIM(ADRESSE_FOURNISSEUR)) > 0);
  
  ALTER TABLE PROMOTION
  ADD CONSTRAINT CK_PROMO_TAUX_BORNES CHECK (TAUX_REDUCTION >= 0 AND TAUX_REDUCTION <= 100),
  ADD CONSTRAINT CK_PROMO_DATES_COHERENTES CHECK (DATE_FIN IS NULL OR DATE_FIN >= DATE_DEBUT);
  
  ALTER TABLE OPERATION
  ADD CONSTRAINT CK_OPERATION_QUANTITE_NON_NEGATIVE CHECK (QUANTITE >= 0),
  ADD CONSTRAINT CK_OPERATION_TYPE_ENUM CHECK (TYPE_OPERATION IN ('ENTREE','SORTIE','AJUSTEMENT','TRANSFERT'));
  
  ALTER TABLE STOCK
  ADD CONSTRAINT CK_STOCK_QUANTITE_NON_NEGATIVE CHECK (QUANTITE >= 0);
  
  ALTER TABLE PROPOSE
  ADD CONSTRAINT CK_PROPOSE_PRIX_POSITIF CHECK (PRIX_FOURNISSEUR > 0);
  
  ALTER TABLE COMMANDE
  ADD CONSTRAINT CK_COMMANDE_MONTANT_NON_NEGATIF CHECK (MONTANT_TOTAL >= 0),
  ADD CONSTRAINT CK_COMMANDE_CANAL_NONVIDE CHECK (LENGTH(TRIM(CANAL)) > 0);
  
  ALTER TABLE DETAILS_COMMANDE
  ADD CONSTRAINT CK_DETAILS_QUANTITE_POSITIVE CHECK (QUANTITE > 0),
  ADD CONSTRAINT CK_DETAILS_PRIX_UNITAIRE_POSITIF CHECK (PRIX_UNITAIRE > 0);
  
  ALTER TABLE ACHAT_FOURNISSEUR
  ADD CONSTRAINT CK_ACHAT_DATE_PASSE CHECK (DATE_ACHAT <= '2025-12-31'),
  ADD CONSTRAINT CK_ACHAT_MONTANT_NON_NEGATIF CHECK (MONTANT_TOTAL >= 0);
  
  ALTER TABLE ACHAT_DETAIL
  ADD CONSTRAINT CK_ACHATDETAIL_MONTANT_POSITIF CHECK (MONTANT > 0);
  
DELIMITER $$

CREATE TRIGGER trg_detailscommande_after_insert
AFTER INSERT ON DETAILS_COMMANDE
FOR EACH ROW
BEGIN
  UPDATE COMMANDE
  SET MONTANT_TOTAL = (
    SELECT COALESCE(SUM(QUANTITE * PRIX_UNITAIRE), 0)
    FROM DETAILS_COMMANDE
    WHERE ID_COMMANDE = NEW.ID_COMMANDE
  )
  WHERE ID_COMMANDE = NEW.ID_COMMANDE;
END$$

CREATE TRIGGER trg_detailscommande_after_update
AFTER UPDATE ON DETAILS_COMMANDE
FOR EACH ROW
BEGIN
IF OLD.ID_COMMANDE IS NOT NULL THEN
    UPDATE COMMANDE
    SET MONTANT_TOTAL = (
      SELECT COALESCE(SUM(QUANTITE * PRIX_UNITAIRE), 0)
      FROM DETAILS_COMMANDE
      WHERE ID_COMMANDE = OLD.ID_COMMANDE
    )
    WHERE ID_COMMANDE = OLD.ID_COMMANDE;
  END IF;
   UPDATE COMMANDE
  SET MONTANT_TOTAL = (
    SELECT COALESCE(SUM(QUANTITE * PRIX_UNITAIRE), 0)
    FROM DETAILS_COMMANDE
    WHERE ID_COMMANDE = NEW.ID_COMMANDE
  )
  WHERE ID_COMMANDE = NEW.ID_COMMANDE;
END$$

CREATE TRIGGER trg_detailscommande_after_delete
AFTER DELETE ON DETAILS_COMMANDE
FOR EACH ROW
BEGIN
  UPDATE COMMANDE
  SET MONTANT_TOTAL = (
    SELECT COALESCE(SUM(QUANTITE * PRIX_UNITAIRE), 0)
    FROM DETAILS_COMMANDE
    WHERE ID_COMMANDE = OLD.ID_COMMANDE
  )
  WHERE ID_COMMANDE = OLD.ID_COMMANDE;
END$$

CREATE TRIGGER trg_achatdetail_after_insert
AFTER INSERT ON ACHAT_DETAIL
FOR EACH ROW
BEGIN
  UPDATE ACHAT_FOURNISSEUR
  SET MONTANT_TOTAL = (
    SELECT COALESCE(SUM(MONTANT), 0)
    FROM ACHAT_DETAIL
    WHERE ID_ACHAT = NEW.ID_ACHAT
  )
  WHERE ID_ACHAT = NEW.ID_ACHAT;
END$$

CREATE TRIGGER trg_achatdetail_after_update
AFTER UPDATE ON ACHAT_DETAIL
FOR EACH ROW
BEGIN
  IF OLD.ID_ACHAT IS NOT NULL THEN
    UPDATE ACHAT_FOURNISSEUR
    SET MONTANT_TOTAL = (
      SELECT COALESCE(SUM(MONTANT), 0)
      FROM ACHAT_DETAIL
      WHERE ID_ACHAT = OLD.ID_ACHAT
    )
    WHERE ID_ACHAT = OLD.ID_ACHAT;
  END IF;

  UPDATE ACHAT_FOURNISSEUR
  SET MONTANT_TOTAL = (
    SELECT COALESCE(SUM(MONTANT), 0)
    FROM ACHAT_DETAIL
    WHERE ID_ACHAT = NEW.ID_ACHAT
    )
  WHERE ID_ACHAT = NEW.ID_ACHAT;
END$$

CREATE TRIGGER trg_achatdetail_after_delete
AFTER DELETE ON ACHAT_DETAIL
FOR EACH ROW
BEGIN
  UPDATE ACHAT_FOURNISSEUR
  SET MONTANT_TOTAL = (
    SELECT COALESCE(SUM(MONTANT), 0)
    FROM ACHAT_DETAIL
    WHERE ID_ACHAT = OLD.ID_ACHAT
  )
  WHERE ID_ACHAT = OLD.ID_ACHAT;
END$$

DELIMITER ;
